type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import animals.Main;
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static java.util.regex.Pattern.compile;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private final Object[][] data;
        private final String[][] script;
        private TestedProgram main;
        private String output = "";

        Scenario(String name) throws IOException {
            data = new YAMLMapper().readValue(new File("test/" + name + ".data.yaml"), String[][].class);
            script = new YAMLMapper().readValue(new File("test/" + name + ".script.yaml"), String[][].class);
        }

        CheckResult check() {
            for (var values : data) {
                for (var action : script) {
                    switch (action[0]) {
                        case "start":
                            main = new TestedProgram(Main.class);
                            output = action.length == 1 ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values));
                            continue;
                        case "finish":
                            if (main.isFinished()) continue;
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "find", pattern -> compile(pattern).matcher(output).find(),
                                    "matches", output::matches);
                            if (validation.get(action[0]).test(format(action[1], values))) continue;
                            return wrong(format(action[2], values));
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import animals.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {
        public GuessAnimalTest() {
            super(Main.class);
        }

        @DynamicTestingMethod
        CheckResult theFirstQuestion() throws IOException {
            return new Scenario("the-first-question").check();
        }

        @DynamicTestingMethod
        CheckResult positiveAnswer() throws IOException {
            return new Scenario("positive-answers").check();
        }

        @DynamicTestingMethod
        CheckResult negativeAnswer() throws IOException {
            return new Scenario("negative-answers").check();
        }

        @DynamicTestingMethod
        CheckResult incorrectAnswer() throws IOException {
            return new Scenario("unclear-answers").check();
        }

        @DynamicTestingMethod
        CheckResult guessingGame() throws IOException {
            return new Scenario("guessing-game").check();
        }

    }
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/guessing-game.data.yaml
  visible: false
  text: |
    #
    # This data file for test the Knowledge Tree
    #
    # Can it climb trees?
    #  yes -> Does it have tassels on his ears?
    #         -> yes -> Lynx
    #         -> no  -> Cat
    #  no  -> Is it living in the forest?
    #         -> yes -> wolf
    #         -> no  -> dog
    #
    ---
    - - |
        yes
        yes
      - a lynx

    - - |
        yes
        no
      - a cat

    - - |
        no
        yes
      - a wolf

    - - |
        no
        no
      - a dog
  learner_created: false
- name: test/guessing-game.script.yaml
  visible: false
  text: |+
    #
    # This is a scenario for testing of the Guessing Game
    #
    ---
    - [start]

    - - contains
      - I want to learn about animals
      - |
        When the program starts, the knowledge tree is empty.
        The program should express its desire to learn about animals.

    - - contains
      - Which animal do you like most?
      - To build an initial tree of knowledge, the program must ask the user about his favorite animal.

    - [input, cat]

    - - contains
      - play a game
      - After the user specifying a favorite animal, the program should offer him to play a game.

    - - contains
      - You think of an animal, and I guess it
      - The program must explain the rules of the game to the user.

    - - contains
      - Press enter
      - The program should be paused. The user will think of an animal and then press Enter.

    - [input, ""]

    #
    # After user press Enter the game started!
    #

    - - contains
      - Is it a cat?
      - The very first question in the very first game should undoubtedly be about a beloved animal.

    - [input, No] # We think of about other animal, not about the cat

    - - contains
      - I give up. What animal do you have in mind?
      - If the program can't guess the animal, it must give up.

    - [input, dog] # Of course, our second animal is a dog!

    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.

    - [input, "it can climb trees"]

    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.

    - [input, no]

    - - contains
      - The cat can climb trees
      - The program must generate the correct fact for the first animal.

    - - find
      - The dog can.t climb tree
      - The program must generate the correct fact for the second animal.

    - - find
      - "(?i)(again|repeat|one more)"
      - The program should invite the user to play this wonderful game again.

    - [input, yes] # Without a doubt, we are playing again!

    - - contains
      - You think of an animal, and I guess it
      - The program must explain the rules of the game to the user.

    - - find
      - Press enter when you.re ready
      - The program should be paused. The user will think of an animal and then press Enter.

    - [input, ""]

    #
    # The second game just started!
    #
    # Now in our Knowledge Tree has two animals and one fact.
    #

    - - contains
      - Can it climb trees?
      - After the first game, the starting question should be the question of fact.

    - [input, yes]

    - - contains
      - Is it a cat?
      - The program must assume that the animal is a cat.

    - - input
      - |
        no
        lynx
        it has tassels on his ears
        yes
        yes

    # We had played the game, and would like to play again.

    - [input, ""]

    #
    # The third game just started!
    #
    # Now in our Knowledge Tree has three animals and two fact.
    #

    - - contains
      - Can it climb trees?
      - |
      - The very first fact that the program learns is always the root element.
      - In every game, the question of this fact should be the first question.

    - [input, no] # No, the animal can't climb trees

    - - contains
      - Is it a dog?
      - The program must assume that the animal is a dog.

    - - input
      - |
        no
        wolf
        it is living in the forest
        yes
        yes

    # We had played the game, and would like to play again.

    - [input, ""]
    #
    # The forth game just started!
    #
    # The Knowledge Tree has four animals and tree fact.
    #
    # Now we will use data from the data file to substitute user answers.
    # This will allow us to check the correctness of the tree construction.

    - [input, "{0}"]

    - - contains
      - "Is it {1}?"
      - "The expected animal must be {1}"

    - [input, yes] # The program guessed the animal we conceived

    - [input, no] # We don't want to play anymore

    - - finish
      - If we do not want to play any more, then the program should exit.

  learner_created: false
- name: src/animals/GuessTheAnimal.java
  visible: true
  text: |
    package animals;

    import java.util.*;
    import java.time.LocalTime;
    import java.util.regex.Pattern;

    public class GuessTheAnimal {
        // TODO: Cleanup: Make a Pattern when a regex is used more than once!

        private final String[] animals = new String[2];
        private final String[] articles = new String[2];
        private final Scanner scanner = new Scanner(System.in);
        private final Random random = new Random();
        private final Pattern SECOND_SPACE = Pattern.compile("(?<=^\\w{1,3}\\s\\w{1,3})\\s");
        private final Pattern REST_OF_FACT = Pattern.compile("\\w+.*");
        private final Map<String, String[]> itCanHasIs = new HashMap<>();
        {
            itCanHasIs.put("it can", new String[] {"can", "can't", "Can it"});
            itCanHasIs.put("it has", new String[] {"has", "doesn't have", "Does it have"});
            itCanHasIs.put("it is", new String[] {"is", "isn't", "Is it"});
        }
        private String startOfFact;
        private String restOfTheFact;
        private int factIsTrueForIndex;

        // I would like to load these lists from files but then the tests break.
        private final Pattern YES_ANSWER = Pattern.compile(
            "(y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?",
            Pattern.CASE_INSENSITIVE
        );
        private final Pattern NO_ANSWER = Pattern.compile(
            "(n|no|no way|nah|nope|negative|i don't think so|yeah no)[.!]?",
            Pattern.CASE_INSENSITIVE
        );
        private final String[] UNCLEAR = {
            "I'm not sure I caught you. Was it yes or no?",
            "Funny, I still don't understand. Is it yes or no?",
            "Oh, it's too complicated for me. Just tell me yes or no.",
            "Could you please simply say yes or no?",
            "Oh no, don't try to confuse me. Please say yes or no."
        };
        private final String[] GOODBYE = {
            "Bye!", "See you soon!", "Have a nice day!",
            "Talk to you later!", "Thank you and goodbye!", "See you later!"
        };

        void run() {
            greet();
            getAnimals();
            askFact();
            stateLearned();
            bye();
        }

        private void greet() {
            int currentHour = LocalTime.now().getHour();
            if (currentHour < 5) {
                System.out.println("Hi, early bird!");
            } else if (currentHour < 12) {
                System.out.println("Good morning.");
            } else if (currentHour < 18) {
                System.out.println("Good afternoon.");
            } else {
                System.out.println("Good evening.");
            }
            System.out.println();
        }

        private void getAnimals() {
            String[] ordinalWords = new String[] {"first", "second"};
            for (int i = 0; i < 2; i++) {
                System.out.printf("Enter the %s animal:%n", ordinalWords[i]);
                String input = scanner.nextLine().strip().toLowerCase();
                if (input.matches("^(a|an)\\s+.+")) {
                    String[] articleAndAnimal = input.split("(?<=^(a|an))\\s");
                    articles[i] = articleAndAnimal[0];
                    animals[i] = articleAndAnimal[1];
                } else {
                    articles[i] = input.matches("^[aeiou].*") ? "an" : "a";
                    animals[i] = input;
                }
            }
        }

        private void askFact() {
            String fact;
            while (true) {
                System.out.printf(
                    "Specify a fact that distinguishes %s %s from %s %s.%n",
                    articles[0], animals[0], articles[1], animals[1]
                );
                System.out.println("The sentence should be of the format: 'It can/has/is ...'.");
                fact = scanner.nextLine().trim().toLowerCase();
                String[] factParts = SECOND_SPACE.split(fact);
                if (factParts.length == 2) {
                    startOfFact = factParts[0];
                    if (itCanHasIs.containsKey(startOfFact)) {
                        restOfTheFact = factParts[1].replaceAll("[.!]$", "");
                        if (REST_OF_FACT.matcher(restOfTheFact).matches()) {
                            break;
                        }
                    }
                }
                System.out.println("The examples of a statement:");
                System.out.println(" - It can fly.");
                System.out.println(" - It has horns.");
                System.out.println(" - It is a mammal.");
            }
            System.out.printf("Is it correct for %s %s?%n", articles[1], animals[1]);
            factIsTrueForIndex = getYesNo().equals("Yes") ? 1 : 0;
        }

        private void stateLearned() {
            System.out.println("I learned the following facts about animals:");
            String positiveCanHasIs = itCanHasIs.get(startOfFact)[0];
            String negativeCanHasIs = itCanHasIs.get(startOfFact)[1];
            for (int i = 0; i < 2; i++) {
                String canHasIs = i == factIsTrueForIndex ? positiveCanHasIs : negativeCanHasIs;
                String fact = String.format(" - The %s %s %s.", animals[i], canHasIs, restOfTheFact);
                System.out.println(fact);
            }
            System.out.println("I can distinguish these animals by asking the question:");
            System.out.printf(" - %s %s?%n", itCanHasIs.get(startOfFact)[2], restOfTheFact);
        }

        private String getYesNo() {
            while (true) {
                String answer = scanner.nextLine().trim();
                if (YES_ANSWER.matcher(answer).matches()) {
                    return "Yes";
                }
                if (NO_ANSWER.matcher(answer).matches()) {
                    return "No";
                }
                System.out.println(UNCLEAR[random.nextInt(UNCLEAR.length)]);
            }
        }

        private void bye() {
            System.out.println(GOODBYE[random.nextInt(GOODBYE.length)]);
        }
    }
  learner_created: true
- name: src/animals/KnowledgeTree.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/132/stages/705/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 29 Jan 2021 16:46:56 UTC
record: -1
