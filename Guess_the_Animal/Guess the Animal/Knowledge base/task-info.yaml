type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [contains, "?", "The program should asks the user for a favourite animal"]
    - [input, cat]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - [input, "1"]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game

    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, yes]
    - [input, no]
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*0.*Exit.*
      - The program should print the menu after the user leave the game
    - - input
      - "0"
    - - finish
      - The program should finish when user select 0. Exit

    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #
    - - start
      - "-type {0}"
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - Welcome to the animal expert system!
      - The program doesn't print the expected message
    - - matches
      - (?is).*1.*Play.*List.*Search.*stat.*Exit.*
      - The program should print the menu
    - - input
      - "0"
    - - finish
      - The program should finish when user refuse the new game
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.IOException;

    public class GuessAnimalTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult testFileFormats() throws IOException {
            return new Scenario("file-formats").check();
        }

        @DynamicTestingMethod
        CheckResult testMenu() throws IOException {
            return new Scenario("menu").check();
        }

    }
  learner_created: false
- name: test/menu.data.yaml
  visible: false
  text: |-
    ---
    #
    # Test case #1
    #
    - - cat
      - |
        no
        shark
        it is a mammal
        no
        yes
        yes
        no
        fox
        it is living in the forest
        yes
        yes
        yes
        no
        no
        dog
        it can climb trees
        no
        yes
        yes
        yes
        no
        wolf
        it has a long bushy tail
        no
        yes
        yes
        yes
        no
        no
        hare
        it is a shy animal
        yes
        no

      #
      # 2. List of all animals
      #
      - "(?si).*cat.*dog.*hare.*shark.*wolf.*"

      #
      # 3. Search for an animal
      #
      - wolf
      - "(?si).*is a mammal.*doesn't have a long bushy tail.*isn't a shy animal.*"

      #
      # Data for the Knowledge Tree statistics
      #
      - It is a mammal
      - "9"
      - "5"
      - "4"
      - "3"
      - "2"
      - "2[.,]4"
  learner_created: false
- name: test/menu.script.yaml
  visible: false
  text: |
    ---
    - [start]
    - [input, "{0}"]  # Favourite animal
    - [input, "1"]    # Play the game
    - [input, ""]     # Press Enter
    - [input, "{1}"]  # Play and fill the knowledge tree
    #
    # After filling the tree, we can test all the menu items.
    #
    - - matches
      - "(?is).*1.*Play.*List.*Search.*Calc.*Print.*Exit.*"
      - The program should print the menu

    #
    # 2. List of all animals
    #
    - [input, "2"]
    - [matches, "{2}", The program should print a list of all animals in alphabetical order.]

    #
    # 3. Search for an animal
    #
    - [input, "3"]
    - [contains, "Enter the animal", The program should ask for an animals to search.]
    - [input, "{3}"]
    - [matches, "{4}", The program should print facts about the animal]

    #
    # 4. Knowledge Tree stats
    #
    - [input, "4"]
    - [contains, "The Knowledge Tree stats", The program should print title for statistics]
    - [matches, "(?is).*root node.*{5}.*", "The root node should be {5}"]
    - [matches, "(?is).*number of nodes[^\\\\R]*{6}.*", "The total number of nodes should be {6}"]
    - [matches, "(?is).*number of animals[^\\\\R]*{7}.*", "The total number of animals should be {7}"]
    - [matches, "(?is).*number of statements[^\\\\R]*{8}.*", "The total number of statements should be {8}"]
    - [matches, "(?is).*height of the tree[^\\\\R]*{9}.*", "The height of the tree should be {9}"]
    - [matches, "(?is).*minimum depth[^\\\\R]*{10}.*", "The minimum depth should be {10}"]
    - [matches, "(?is).*average depth[^\\\\R]*{11}.*", "The average depth should be {11}"]
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private final Object[][] data;
        private final String[][] script;
        private TestedProgram main;
        private String output = "";

        Scenario(String name) throws IOException {
            data = new YAMLMapper().readValue(new File("test/" + name + ".data.yaml"), String[][].class);
            script = new YAMLMapper().readValue(new File("test/" + name + ".script.yaml"), String[][].class);
        }

        CheckResult check() {
            for (var values : data) {
                for (var action : script) {
                    switch (action[0]) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1 ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values));
                            continue;
                        case "finish":
                            if (main.isFinished()) continue;
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "matches", output::matches);

                            if (validation.get(action[0]).test(format(action[1], values))) continue;
                            return wrong(format(action[2], values));
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: src/animals/KnowledgeTree.java
  visible: true
  text: |
    package animals;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.fasterxml.jackson.databind.json.JsonMapper;
    import com.fasterxml.jackson.dataformat.xml.XmlMapper;
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;

    import java.io.File;
    import java.io.IOException;


    @JsonInclude(JsonInclude.Include.NON_NULL)
    class TreeNode {

        // No parent Node to avoid circular references.
        // Fields must either be public or have public getters and setters
        // to enable serialization via jackson.
        public TreeNode yes;
        public TreeNode no;
        public String data;

        public TreeNode() {}  // Required for json serialization.

        @JsonIgnore
        TreeNode(String data) {
            this.data = data;
        }

        @JsonIgnore
        TreeNode(String article, String name) {
            this.data = article + " " + name;
        }

        @JsonIgnore
        boolean isAnimal() {
            return yes == null && no == null;
        }
    }


    class KnowledgeTree {

        TreeNode root;
        private final String FILENAME;
        private final ObjectMapper objectMapper;

        KnowledgeTree(String mapperType) {
            switch (mapperType) {
                case "json":
                    objectMapper = new JsonMapper();
                    FILENAME = "animals.json";
                    break;
                case "xml":
                    objectMapper = new XmlMapper();
                    FILENAME = "animals.xml";
                    break;
                case "yaml":
                    objectMapper = new YAMLMapper();
                    FILENAME = "animals.yaml";
                    break;
                default:
                    throw new IllegalArgumentException("Invalid type specified.");
            }
        }

        void insert(
                TreeNode fact,
                TreeNode parent,
                TreeNode oldAnimal,
                TreeNode newAnimal,
                boolean factIsTrueForNewAnimal) {
            if (parent == null) {
                root = fact;
            } else if (oldAnimal == parent.yes) {
                parent.yes = fact;
            } else {
                parent.no = fact;
            }

            if (factIsTrueForNewAnimal) {
                fact.yes = newAnimal;
                fact.no = oldAnimal;
            } else {
                fact.yes = oldAnimal;
                fact.no = newAnimal;
            }
        }

        void load() {
            try {
                root = objectMapper.readValue(new File(FILENAME), TreeNode.class);
            } catch (IOException e) {
                root = null;
            }
        }

        void save() {
            try {
                objectMapper
                     .writerWithDefaultPrettyPrinter()
                     .writeValue(new File(FILENAME), root);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/animals/Menu.java
  visible: true
  learner_created: true
- name: src/animals/GuessingGame.java
  visible: true
  text: |
    package animals;

    import java.util.*;
    import java.time.LocalTime;
    import java.util.regex.Pattern;


    public class GuessTheAnimal {

        private final Scanner scanner = new Scanner(System.in);
        private final Random random = new Random();
        private final Pattern SECOND_SPACE = Pattern.compile("(?<=^\\w{1,3}\\s\\w{1,3})\\s");
        private final Pattern REST_OF_FACT = Pattern.compile("\\w+.*");
        private final Pattern ARTICLE_ANIMAL = Pattern.compile("^(a|an)\\s+.+");
        private final Pattern SPACE_AFTER_ARTICLE = Pattern.compile("(?<=^(a|an))\\s");
        private final Pattern START_VOWEL = Pattern.compile("^[aeiou].*");
        private final Pattern DOT_BANG_END = Pattern.compile("[.!]$");
        private final Pattern YES_ANSWER = Pattern.compile(
            "(y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?",
            Pattern.CASE_INSENSITIVE
        );
        private final Pattern NO_ANSWER = Pattern.compile(
            "(n|no|no way|nah|nope|negative|i don't think so|yeah no)[.!]?",
            Pattern.CASE_INSENSITIVE
        );
        private final Map<String, String[]> itCanHasIs = Map.of(
            "it can", new String[] {"can", "can't", "Can it"},
            "it has", new String[] {"has", "doesn't have", "Does it have"},
            "it is", new String[] {"is", "isn't", "Is it"}
        );
        private final String[] UNCLEAR = {
            "I'm not sure I caught you. Was it yes or no?",
            "Funny, I still don't understand. Is it yes or no?",
            "Oh, it's too complicated for me. Just tell me yes or no.",
            "Could you please simply say yes or no?",
            "Oh no, don't try to confuse me. Please say yes or no."
        };
        private final String[] GOODBYE = {
            "Bye!", "See you soon!", "Have a nice day!",
            "Talk to you later!", "Thank you and goodbye!", "See you later!"
        };
        private final KnowledgeTree knowledge;

        GuessTheAnimal(String mapperType) {
            knowledge = new KnowledgeTree(mapperType);
        }


        void run() {
            greet();
            initKnowledge();
            System.out.println("Let's play a game!");
            do {
                System.out.println();
                System.out.println("You think of an animal, and I guess it.");
                System.out.println("Press enter when you're ready.");
                scanner.nextLine();
                play();
                System.out.println();
                System.out.println("Would you like to play again?");
            } while (getYesNo());
            knowledge.save();
            bye();
        }

        private void greet() {
            int currentHour = LocalTime.now().getHour();
            if (currentHour < 5) {
                System.out.println("Hi, early bird!");
            } else if (currentHour < 12) {
                System.out.println("Good morning.");
            } else if (currentHour < 18) {
                System.out.println("Good afternoon.");
            } else {
                System.out.println("Good evening.");
            }
            System.out.println();
        }

        private void initKnowledge() {
            knowledge.load();
            if (knowledge.root == null) {
                knowledge.root = askFavoriteAnimal();
            }
        }

        private TreeNode askFavoriteAnimal() {
            System.out.println("I want to learn about animals.");
            System.out.println("Which animal do you like most?");
            TreeNode animal = getAnimal();
            System.out.println("Wonderful! I've learned so much about animals");
            return animal;
        }

        private void play() {
            TreeNode currentTreeNode = knowledge.root;
            TreeNode parent = null;
            while (true) {
                if (currentTreeNode.isAnimal()) {
                    System.out.printf("Is it %s?%n", currentTreeNode.data);
                    if (getYesNo()) {
                        System.out.println("Awesome! That was fun.");
                    } else {
                        System.out.println("I give up. What animal do you have in mind?");
                        createNewFact(currentTreeNode, parent);
                    }
                    break;
                } else {
                    System.out.println(getQuestionFromFact(currentTreeNode));
                    parent = currentTreeNode;
                    currentTreeNode = getYesNo() ? currentTreeNode.yes : currentTreeNode.no;
                }
            }
        }

        private void bye() {
            printRandomMessage(GOODBYE);
        }

        private TreeNode getAnimal() {
            String name = scanner.nextLine().strip().toLowerCase();
            String article;
            if (ARTICLE_ANIMAL.matcher(name).matches()) {
                String[] articleAndAnimal = SPACE_AFTER_ARTICLE.split(name);
                article = articleAndAnimal[0];
                name = articleAndAnimal[1];
            } else {
                article = START_VOWEL.matcher(name).matches() ? "an" : "a";
            }
            return new TreeNode(article, name);
        }

        private void createNewFact(TreeNode oldAnimal, TreeNode parent) {
            TreeNode newAnimal = getAnimal();
            String factStart;
            String factRest;
            while (true) {
                System.out.printf("Specify a fact that distinguishes %s from %s.%n",
                    oldAnimal.data, newAnimal.data
                );
                System.out.println("The sentence should be of the format: 'It can/has/is ...'.");
                String answer = scanner.nextLine().trim().toLowerCase();
                answer = DOT_BANG_END.matcher(answer).replaceAll("");
                String[] answerParts = SECOND_SPACE.split(answer);
                if (answerParts.length == 2) {
                    factStart = answerParts[0];
                    if (itCanHasIs.containsKey(factStart)) {
                        factRest = answerParts[1];
                        if (REST_OF_FACT.matcher(factRest).matches()) {
                            break;
                        }
                    }
                }
                System.out.println("The examples of a statement:");
                System.out.println(" - It can fly.");
                System.out.println(" - It has horns.");
                System.out.println(" - It is a mammal.");
            }

            System.out.printf("Is the statement correct for %s?%n", newAnimal.data);
            boolean factIsTrueForNewAnimal = getYesNo();

            System.out.println("I learned the following facts about animals:");
            String[] sentenceParts = itCanHasIs.get(factStart);
            String oldName = SPACE_AFTER_ARTICLE.split(oldAnimal.data)[1];
            String newName = SPACE_AFTER_ARTICLE.split(newAnimal.data)[1];
            if (factIsTrueForNewAnimal) {
                System.out.printf(" - The %s %s %s.%n", oldName, sentenceParts[1], factRest);
                System.out.printf(" - The %s %s %s.%n", newName, sentenceParts[0], factRest);
            } else {
                System.out.printf(" - The %s %s %s.%n", oldName, sentenceParts[0], factRest);
                System.out.printf(" - The %s %s %s.%n", newName, sentenceParts[1], factRest);
            }

            String statement = String.format("%s%s %s.",
                Character.toUpperCase(factStart.charAt(0)),
                factStart.substring(1),
                factRest
            );
            TreeNode fact = new TreeNode(statement);
            knowledge.insert(fact, parent, oldAnimal, newAnimal, factIsTrueForNewAnimal);

            System.out.println("I can distinguish these animals by asking the question:");
            System.out.println(" - " + getQuestionFromFact(fact));

            System.out.println("Nice! I've learned so much about animals!");
        }

        private String getQuestionFromFact(TreeNode fact) {
            String[] parts = SECOND_SPACE.split(fact.data);
            String questionStart = itCanHasIs.get(parts[0].toLowerCase())[2];
            String questionRest = DOT_BANG_END.matcher(parts[1]).replaceAll("?");
            return  questionStart + " " + questionRest;
        }

        private boolean getYesNo() {
            while (true) {
                String answer = scanner.nextLine().trim();
                if (YES_ANSWER.matcher(answer).matches()) {
                    return true;
                }
                if (NO_ANSWER.matcher(answer).matches()) {
                    return false;
                }
                printRandomMessage(UNCLEAR);
            }
        }

        private void printRandomMessage(String[] strings) {
            System.out.println(strings[random.nextInt(strings.length)]);
        }
    }
  learner_created: true
- name: src/animals/TreeNode.java
  visible: true
  learner_created: true
- name: src/animals/Helpers.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/132/stages/707/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 02 Feb 2021 18:55:14 UTC
record: -1
