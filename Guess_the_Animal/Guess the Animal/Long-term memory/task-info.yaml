type: edu
files:
- name: src/animals/Main.java
  visible: true
  text: |
    package animals;

    public class Main {
    }
  learner_created: false
- name: test/unclear-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the interpretation of unclear responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - contains
      - "yes or no"
      - "The answer \"{0}\" is unclear and the program should ask again."
  learner_created: false
- name: test/file-formats.data.yaml
  visible: false
  text: |-
    ---
    - - json
    - - xml
    - - yaml
  learner_created: false
- name: test/Scenario.java
  visible: false
  text: |-
    import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.io.File;
    import java.io.IOException;
    import java.util.Map;
    import java.util.function.Predicate;

    import static java.text.MessageFormat.format;
    import static java.util.function.Predicate.not;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class Scenario {
        private final Object[][] data;
        private final String[][] script;
        private TestedProgram main;
        private String output = "";

        Scenario(String name) throws IOException {
            data = new YAMLMapper().readValue(new File("test/" + name + ".data.yaml"), String[][].class);
            script = new YAMLMapper().readValue(new File("test/" + name + ".script.yaml"), String[][].class);
        }

        CheckResult check() {
            for (var values : data) {
                for (var action : script) {
                    switch (action[0]) {
                        case "start":
                            main = new TestedProgram();
                            output = action.length == 1 ? main.start()
                                    : main.start(format(action[1], values).split(" "));
                            continue;
                        case "input":
                            output = main.execute(format(action[1], values));
                            continue;
                        case "finish":
                            if (main.isFinished()) continue;
                            return wrong(format(action[1], values));
                        default:
                            final Map<String, Predicate<String>> validation = Map.of(
                                    "contains", output::contains,
                                    "not contains", not(output::contains),
                                    "file exists", file -> new File(file).exists(),
                                    "file delete", file -> new File(file).delete(),
                                    "matches", output::matches);

                            if (validation.get(action[0]).test(format(action[1], values))) continue;
                            return wrong(format(action[2], values));
                    }
                }
            }
            return correct();
        }

    }
  learner_created: false
- name: test/negative-answers.script.yaml
  visible: false
  text: |
    #
    # This is a script to test the correct interpretation of negative answers.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct negative."
  learner_created: false
- name: test/positive-answers.data.yaml
  visible: false
  text: |-
    #
    # The possible positive answers
    #
    ---
    # The program must ignore the case of letters.
    - - y
    - - Y
    # The user can put a point
    - - y.
    - - Y.
    # An exclamation mark is also allowed.
    - - y!
    - - Y!
    # The program must ignore leading spaces.
    - - "   Yes"
    # As well ignore trailing spaces.
    - - "Yes   "
    # All of the following expressions are valid answers.
    - - yes
    - - Yes
    - - YES
    - - yes.
    - - Yes!
    - - YES!
    - - yES!
    - - YeS
    - - Yeah
    - - yeah
    - - Yeah!
    - - YeAh.
    - - YEAH
    - - yep
    - - yEp
    - - Yep!
    - - YEP.
    - - sure
    - - Sure!
    - - SURE!
    - - surE.
    - - right
    - - Right.
    - - Right!
    - - affirmative
    - - Affirmative!
    - - correct
    - - correct.
    - - indeed
    - - you bet
    - - exactly
    - - you said it.
    - - you said it!
    - - you said it
  learner_created: false
- name: test/the-first-question.script.yaml
  visible: false
  text: |-
    #
    # This is a script to test the generation of the first question.
    #
    ---
    - [start]
    - [input, "{0}"]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it {1}?", "The program should ask: \"Is it {1}?\""]
  learner_created: false
- name: test/negative-answers.data.yaml
  visible: false
  text: |
    #
    # The possible negative answers
    #
    ---
    # The program must ignore the case of letters.
    - - n
    - - N
    # The user can put a point
    - - n.
    - - N.
    # An exclamation mark is also allowed.
    - - n!
    - - N!
    # The program must ignore leading spaces.
    - - "   No"
    # As well ignore trailing spaces.
    - - "No   "
    # All of the following expressions are valid answers.
    - - no
    - - nO
    - - NO
    - - No
    - - no.
    - - no!
    - - No!
    - - NO!
    - - no way
    - - no way!
    - - No Way!
    - - NO WAY!
    - - no waY.
    - - nah
    - - Nah.
    - - NAH!
    - - naH
    - - nope
    - - NoPe!
    - - NOPE.
    - - negative
    - - Negative.
    - - i don't think so
    - - I don't think so
    - - I don't think so.
    - - I don't Think SO.
    - - yeah no
    - - yeah no.
    - - yeah no!
    - - yeah NO!
  learner_created: false
- name: test/GuessAnimalTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.io.File;
    import java.io.IOException;
    import java.util.stream.Stream;

    public class GuessAnimalTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult theFirstQuestion() throws IOException {
            return new Scenario("the-first-question").check();
        }

        @DynamicTestingMethod
        CheckResult positiveAnswer() throws IOException {
            return new Scenario("positive-answers").check();
        }

        @DynamicTestingMethod
        CheckResult negativeAnswer() throws IOException {
            return new Scenario("negative-answers").check();
        }

        @DynamicTestingMethod
        CheckResult incorrectAnswer() throws IOException {
            return new Scenario("unclear-answers").check();
        }

        @DynamicTestingMethod
        CheckResult testFileFormats() throws IOException {
            final var result = new Scenario("file-formats").check();

            Stream.of("yaml", "json", "xml")
                    .map("animals."::concat)
                    .map(File::new)
                    .filter(File::exists)
                    .forEach(File::delete);

            return result;
        }
    }
  learner_created: false
- name: test/unclear-answers.data.yaml
  visible: false
  text: |-
    #
    # All of the following expressions should be treated as unclear
    #
    ---
    - - y..
    - - Y!.
    - - ye
    - - jes
    - - Jes
    - - yes...
    - - да
    - - Так
    - - yes, yes
    - - Yea
    - - Ja
    - - Jawohl!
    - - ja natürlich!
    - - so genau
    - - 1
    - - +
    - - yepi
    - - Yep!!
    - - Yes, sure!
    - - Ok
    - - Rights
    - - affErmative
    - - n..
    - - N!!
    - - nea
    - - nop
    - - noppi
    - - no wa
    - - no way!!!
    - - na
    - - nahi
    - - nega
    - - negat
    - - negati
    - - negativ
    - - i don't think..
    - - i don't
    - - i
    - - I no
    - - i don't think so...
    - -
  learner_created: false
- name: test/the-first-question.data.yaml
  visible: false
  text: |-
    ---
    - [cat, a cat]
    - [DOG, a dog]
    - [hare, a hare]
    - [WOLF, a wolf]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [A Unicorn, a unicorn]
    - [APE, an ape]
    - [uniCorn, an unicorn]
    - [uniCorn, an unicorn]
    - [linX, a linx]
  learner_created: false
- name: test/file-formats.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test file formats: JSON, YAML, XML.
    #
    ---
    - [start, "-type {0}"]
    - [matches, "(?si).*animal.*", The program should asks the user for a favourite animal]
    - [input, cat]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The first game started
    #
    - - contains
      - Is it a cat?
      - The program should asks the user is it the cat
    - [input, no]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - [input, dog]
    - - contains
      - Specify a fact that distinguishes a cat from a dog
      - The program should find out how one animal differs from another.
    - [input, It can climbs tree]
    - - contains
      - Is the statement correct for a dog?
      - The program should clarify if the statement is correct for a dog.
    - [input, No]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, Yes]
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""] # Press Enter to start the game
    #
    # The second game started
    #
    - - contains
      - Can it climbs tree?
      - The only question in the knowledge tree should be "Can it climbs tree?"
    - [input, Yes]
    - - contains
      - Is it a cat?
      - The program doesn't print the expected message
    - [input, No]
    - - contains
      - I give up. What animal do you have in mind?
      - The program should give up
    - - input
      - a lynx
    - - input
      - It is living in the forest
    - - contains
      - Is the statement correct for a lynx?
      - The program doesn't print the expected message
    - [input, Yes]
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    - - file exists
      - "animals.{0}"
      - "The program should save knowledge tree to animals.{0} file."

    #
    # Start the program again and load the Knowledge Tree
    #

    - [start, "-type {0}"]
    - - not contains
      - Which animal do you like most?
      - If knowledge base is exist the program should not asks the user for a favourite animal
    - - contains
      - You think of an animal, and I guess it.
      - The program should asks the user to think of an animal
    - [input, ""]
    #
    # The third game started. Test for the Knowledge Tree.
    #
    - - contains
      - Can it climbs tree?
      - The root question in knowledge tree should be "Can it climbs tree?"
    - [input, yes]
    - - contains
      - Is it living in the forest?
      - The second question should be 'Is it living in the forest?'
    - [input, sure]
    - - contains
      - Is it a lynx?
      - The last question should be 'Is it a lynx?'
    - [input, right]
    - - matches
      - (?si).*(again|repeat|one more game).*
      - The program should ask to play again
    - [input, No]
    - [finish, The program should finish when the user refuse the new game]
    #
    # Clear workspace after the test
    #
    - - file delete
      - "animals.{0}"
      - "The test can't delete animals.{0} file."

  learner_created: false
- name: test/positive-answers.script.yaml
  visible: false
  text: |+
    #
    # This is a script to test the correct interpretation of negative responses.
    #
    ---
    - [start]
    - [input, cat]
    - [input, ""]   # Press Enter to start the game
    #
    # The game started
    #
    - [contains, "Is it a cat?", "The program should ask: \"Is it a cat?\""]
    #
    # Here we substitute all values from the data file
    #
    - [input, "{0}"]
    - - not contains
      - "yes or no"
      - "The answer \"{0}\" should be treated as correct positive."

  learner_created: false
- name: src/animals/KnowledgeTree.java
  visible: true
  text: |
    package animals;


    abstract class Node {
        Node parent;
        Node trueChild;
        Node falseChild;
    }


    class Animal extends Node {
        final String article;
        final String name;

        Animal(String article, String name) {
            this.article = article;
            this.name = name;
        }
    }


    class Fact extends Node {
        final String fact;
        final String question;

        Fact(String fact, String question) {
            this.fact = fact;
            this.question = question;
        }
    }


    class KnowledgeTree {
        private Node root;

        Node getRoot() {
            return root;
        }

        void setRoot(Node root) {
            this.root = root;
        }

        void insert(Fact fact, Animal oldAnimal, Animal newAnimal, boolean factIsTrueForNewAnimal) {
            if (oldAnimal.parent == null) {
                root = fact;
            } else if (oldAnimal == oldAnimal.parent.trueChild) {
                oldAnimal.parent.trueChild = fact;
            } else {
                oldAnimal.parent.falseChild = fact;
            }
            fact.parent = oldAnimal.parent;
            oldAnimal.parent = fact;
            newAnimal.parent = fact;

            if (factIsTrueForNewAnimal) {
                fact.trueChild = newAnimal;
                fact.falseChild = oldAnimal;
            } else {
                fact.trueChild = oldAnimal;
                fact.falseChild = newAnimal;
            }
        }
    }
  learner_created: true
- name: src/animals/GuessTheAnimal.java
  visible: true
  text: |
    package animals;

    import java.util.*;
    import java.time.LocalTime;
    import java.util.regex.Pattern;

    public class GuessTheAnimal {

        private final Scanner scanner = new Scanner(System.in);
        private final Random random = new Random();
        private final Pattern SECOND_SPACE = Pattern.compile("(?<=^\\w{1,3}\\s\\w{1,3})\\s");
        private final Pattern REST_OF_FACT = Pattern.compile("\\w+.*");
        private final Pattern ARTICLE_ANIMAL = Pattern.compile("^(a|an)\\s+.+");
        private final Pattern SPACE_AFTER_ARTICLE = Pattern.compile("(?<=^(a|an))\\s");
        private final Pattern START_VOWEL = Pattern.compile("^[aeiou].*");
        private final Pattern DOT_BANG_END = Pattern.compile("[.!]$");
        private final Pattern YES_ANSWER = Pattern.compile(
            "(y|yes|yeah|yep|sure|right|affirmative|correct|indeed|you bet|exactly|you said it)[.!]?",
            Pattern.CASE_INSENSITIVE
        );
        private final Pattern NO_ANSWER = Pattern.compile(
            "(n|no|no way|nah|nope|negative|i don't think so|yeah no)[.!]?",
            Pattern.CASE_INSENSITIVE
        );

        private final Map<String, String[]> itCanHasIs = new HashMap<>();
        {
            itCanHasIs.put("it can", new String[] {"can", "can't", "Can it"});
            itCanHasIs.put("it has", new String[] {"has", "doesn't have", "Does it have"});
            itCanHasIs.put("it is", new String[] {"is", "isn't", "Is it"});
        }
        private final String[] UNCLEAR = {
            "I'm not sure I caught you. Was it yes or no?",
            "Funny, I still don't understand. Is it yes or no?",
            "Oh, it's too complicated for me. Just tell me yes or no.",
            "Could you please simply say yes or no?",
            "Oh no, don't try to confuse me. Please say yes or no."
        };
        private final String[] GOODBYE = {
            "Bye!", "See you soon!", "Have a nice day!",
            "Talk to you later!", "Thank you and goodbye!", "See you later!"
        };
        private final KnowledgeTree knowledge = new KnowledgeTree();

        void run() {
            greet();
            askFavoriteAnimal();
            System.out.println("Let's play a game!");
            do {
                System.out.println();
                System.out.println("You think of an animal, and I guess it.");
                System.out.println("Press enter when you're ready.");
                scanner.nextLine();
                play();
                System.out.println();
                System.out.println("Would you like to play again?");
            } while (getYesNo());
            bye();
        }

        private void greet() {
            int currentHour = LocalTime.now().getHour();
            if (currentHour < 5) {
                System.out.println("Hi, early bird!");
            } else if (currentHour < 12) {
                System.out.println("Good morning.");
            } else if (currentHour < 18) {
                System.out.println("Good afternoon.");
            } else {
                System.out.println("Good evening.");
            }
            System.out.println();
        }

        private void askFavoriteAnimal() {
            System.out.println("I want to learn about animals.");
            System.out.println("Which animal do you like most?");
            knowledge.setRoot(getAnimal());
            System.out.println("Wonderful! I've learned so much about animals");
        }

        private void play() {
            Node currentNode = knowledge.getRoot();
            while (true) {
                if (currentNode instanceof Fact) {
                    Fact fact = (Fact) currentNode;
                    System.out.println(fact.question);
                    currentNode = getYesNo() ? currentNode.trueChild : currentNode.falseChild;
                } else {
                    Animal animal = (Animal) currentNode;
                    System.out.printf("Is it %s %s?%n", animal.article, animal.name);
                    if (getYesNo()) {
                        System.out.println("Awesome! That was fun.");
                    } else {
                        System.out.println("I give up. What animal do you have in mind?");
                        createNewFact(animal, getAnimal());
                    }
                    break;
                }
            }
        }

        private void bye() {
            printRandomMessage(GOODBYE);
        }

        private Animal getAnimal() {
            String name = scanner.nextLine().strip().toLowerCase();
            String article;
            if (ARTICLE_ANIMAL.matcher(name).matches()) {
                String[] articleAndAnimal = SPACE_AFTER_ARTICLE.split(name);
                article = articleAndAnimal[0];
                name = articleAndAnimal[1];
            } else {
                article = START_VOWEL.matcher(name).matches() ? "an" : "a";
            }
            return new Animal(article, name);
        }

        private void createNewFact(Animal oldAnimal, Animal newAnimal) {
            String statement;
            String factStart;
            String factRest;
            while (true) {
                System.out.printf(
                    "Specify a fact that distinguishes %s %s from %s %s.%n",
                    oldAnimal.article, oldAnimal.name, newAnimal.article, newAnimal.name
                );
                System.out.println("The sentence should be of the format: 'It can/has/is ...'.");
                statement = scanner.nextLine().trim().toLowerCase();
                statement = DOT_BANG_END.matcher(statement).replaceAll("");
                String[] statementParts = SECOND_SPACE.split(statement);
                if (statementParts.length == 2) {
                    factStart = statementParts[0];
                    if (itCanHasIs.containsKey(factStart)) {
                        factRest = statementParts[1];
                        if (REST_OF_FACT.matcher(factRest).matches()) {
                            break;
                        }
                    }
                }
                System.out.println("The examples of a statement:");
                System.out.println(" - It can fly.");
                System.out.println(" - It has horns.");
                System.out.println(" - It is a mammal.");
            }

            System.out.printf("Is the statement correct for %s %s?%n",
                newAnimal.article, newAnimal.name
            );
            boolean factIsTrueForNewAnimal = getYesNo();

            System.out.println("I learned the following facts about animals:");
            String[] sentenceParts = itCanHasIs.get(factStart);
            if (factIsTrueForNewAnimal) {
                System.out.printf(" - The %s %s %s.%n", oldAnimal.name, sentenceParts[1], factRest);
                System.out.printf(" - The %s %s %s.%n", newAnimal.name, sentenceParts[0], factRest);
            } else {
                System.out.printf(" - The %s %s %s.%n", oldAnimal.name, sentenceParts[0], factRest);
                System.out.printf(" - The %s %s %s.%n", newAnimal.name, sentenceParts[1], factRest);
            }

            System.out.println("I can distinguish these animals by asking the question:");
            String question = String.format("%s %s?", sentenceParts[2], factRest);
            System.out.println(" - " + question);

            statement = Character.toUpperCase(statement.charAt(0)) + statement.substring(1) + ".";
            Fact fact = new Fact(statement, question);
            knowledge.insert(fact, oldAnimal, newAnimal, factIsTrueForNewAnimal);

            System.out.println("Nice! I've learned so much about animals!");
        }

        private boolean getYesNo() {
            while (true) {
                String answer = scanner.nextLine().trim();
                if (YES_ANSWER.matcher(answer).matches()) {
                    return true;
                }
                if (NO_ANSWER.matcher(answer).matches()) {
                    return false;
                }
                printRandomMessage(UNCLEAR);
            }
        }

        private void printRandomMessage(String[] strings) {
            System.out.println(strings[random.nextInt(strings.length)]);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/132/stages/706/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 01 Feb 2021 18:35:16 UTC
record: 4
